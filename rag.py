# -*- coding: utf-8 -*-
"""rag.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/140J5WSN2mmKDGcTwdxUJW-9Bkri5DUty
"""

!pip -qqq install pip --progress-bar off
!pip -qqq install langchain-groq==0.1.3 --progress-bar off
!pip -qqq install langchain==0.1.17 --progress-bar off
!pip -qqq install llama-parse==0.1.3 --progress-bar off
!pip -qqq install qdrant-client==1.9.1  --progress-bar off
!pip -qqq install "unstructured[md]"==0.13.6 --progress-bar off
!pip -qqq install fastembed==0.2.7 --progress-bar off
!pip -qqq install flashrank==0.2.4 --progress-bar off

import os
import textwrap
from pathlib import Path

from google.colab import userdata
from IPython.display import Markdown
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.retrievers import ContextualCompressionRetriever
from langchain.retrievers.document_compressors import FlashrankRerank
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import Qdrant
from langchain_community.document_loaders import UnstructuredMarkdownLoader
from langchain_community.embeddings.fastembed import FastEmbedEmbeddings
from langchain_core.prompts import ChatPromptTemplate
from langchain_groq import ChatGroq
from llama_parse import LlamaParse


os.environ["GROQ_API_KEY"] = userdata.get("GROQ_API_KEY")


def print_response(response):
    response_txt = response["result"]
    for chunk in response_txt.split("\n"):
        if not chunk:
            print()
            continue
        print("\n".join(textwrap.wrap(chunk, 100, break_long_words=False)))

instruction = """The provided document is Meta First Quarter 2024 Results.
This form provides detailed financial information about the company's performance for a specific quarter.
It includes unaudited financial statements, management discussion and analysis, and other relevant disclosures required by the SEC.
It contains many tables.
Try to be precise while answering the questions"""

parser = LlamaParse(
    api_key=userdata.get("LLAMA_PARSE"),
    result_type="markdown",
    parsing_instruction=instruction,
    max_timeout=5000,
)

llama_parse_documents = await parser.aload_data("/content/meta-earnings.pdf")

parsed_doc = llama_parse_documents[0]

Markdown(parsed_doc.text[:4096])

document_path = Path("/parsed_document.md")
with document_path.open("a") as f:
    f.write(parsed_doc.text)

loader = UnstructuredMarkdownLoader(document_path)
loaded_documents = loader.load()

text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=2048,
    chunk_overlap=128,
)
docs = text_splitter.split_documents(loaded_documents)
len(docs)

print(docs[0].page_content)

embeddings = FastEmbedEmbeddings(model_name="BAAI/bge-base-en-v1.5")

qdrant = Qdrant.from_documents(
    docs,
    embeddings,
    # location=":memory:",
    path="./db",
    collection_name="document_embeddings",
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# query = "What is the most important innovation from Meta?"
# similar_docs = qdrant.similarity_search_with_score(query)

for doc, score in similar_docs:
    print(f"text: {doc.page_content[:256]}\n")
    print(f"score: {score}")
    print("-" * 80)
    print()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# retriever = qdrant.as_retriever(search_kwargs={"k": 5})
# retrieved_docs = retriever.invoke(query)

for docs in retrieved_docs:
  print(f"id: {docs.metadata['_id']}\n")
  print(f"text: {docs.page_content[:256]}\n")
  print("-" *  80)
  print()

compressor = FlashrankRerank(model="ms-marco-MiniLM-L-12-v2")
compression_retriever = ContextualCompressionRetriever(
    base_compressor=compressor, base_retriever=retriever
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# reranked_docs =compression_retriever.invoke(query)
# len(reranked_docs)

for docs in reranked_docs:
  print(f"id: {docs.metadata['_id']}\n")
  print(f"text: {docs.page_content[:256]}\n")
  print(f"score: {docs.metadata['relevance_score']}")
  print("-" *  80)
  print()

llm = ChatGroq(temperature=0, model_name="llama3-70b-8192")

prompt_template = """
Use the following pieces of information to answer the user's question.
If you don't know the answer, just say that you don't know, don't try to make up an answer.

Context: {context}
Question: {question}

Answer the question and provide additional helpful information,
based on the pieces of information, if applicable. Be succinct.

Responses should be properly formatted to be easily read.
"""

prompt = PromptTemplate(
    template=prompt_template, input_variables=["context", "question"]
)

qa = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=compression_retriever,
    return_source_documents=True,
    chain_type_kwargs={"prompt": prompt, "verbose": True},
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# response = qa.invoke("What is the most significant innovation from Meta?")

print_response(response)

